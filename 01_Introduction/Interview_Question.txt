1) What is React ??
React, often referred to as React.js or ReactJS, is an open-source JavaScript library developed by Facebook for building user interfaces (UIs). 
Its primary purpose is to enable developers to create dynamic and interactive web applications efficiently.

2) Library Vs Framework ??
A library is a collection of pre-written, reusable code for specific tasks, 
giving the developer control over the application's flow by calling the library's functions when needed. 
A framework, on the other hand, is a broader, pre-written structure and set of rules that dictates the application's architecture, 
controlling the flow by calling the developer's code at predefined points, which is known as inversion of control. 

Library
What it is: A set of tools, like a toolbox, containing pre-written code (functions, classes, etc.) for specific jobs. 
Control: The developer is in charge of the program's control flow, deciding when and how to use the library. 
Scope: Generally more specialized and focused on specific tasks. 
Example: jQuery, a JavaScript library that helps developers manipulate HTML and CSS. 
Framework
What it is: A pre-defined skeleton or structure for an application, providing a complete architecture that the developer builds their code into. 
Control: The framework controls the overall flow of the application and dictates when and where your code is called, a concept called "inversion of control". 
Scope: More comprehensive and provides a broader set of functionality and conventions for building the application. 
Example: Angular or Vue, JavaScript frameworks that provide a complete structure for building web applications. 



3) single page application vs multi page application
A Single Page Application (SPA) loads a single HTML page and dynamically updates content with JavaScript, 
providing a smooth, app-like experience but requiring extra effort for SEO. 
A Multi-Page Application (MPA) loads a new page from the server with every user interaction, 
which is better for SEO, large content sites, and complex applications but can feel slower



4) What is SEO ??
Search Engine Optimization
SEO, or Search Engine Optimization, is the process of improving a website's visibility in search engine results pages (SERPs) to increase organic, unpaid traffic


5) Why Use React ??
Use React to build efficient, dynamic, and scalable user interfaces (UIs) due to its component-based architecture, virtual DOM for faster rendering, and large community support.
DRY -> Dont Repeat Yourself 


6) What Is Component Based Architechture ??
a software design approach that structures an application as a collection of self-contained, 
reusable software components that communicate through defined interfaces


7) What are Package Managers ??
Package managers are software tools that automate the installation, removal, updating, and configuration of 
software and their dependencies. 

8) npm and npx ??


9) What is JSX ??
-> JAvascript XML. It has HTML Like structure
JSX, or JavaScript XML, is a syntax extension for JavaScript that allows developers to write HTML-like code directly within their JavaScript files. It is primarily used with React to describe the structure and appearance of user interfaces.


10) Type of Components ??
Functiona Based and Class Based

11) JSX Feature ??
HTML-like structure within JavaScript, the ability to embed JavaScript expressions directly in the markup using curly braces, 
and the use of camelCase for HTML attributes.

12) React Fragments ??
Using Two methods -> React.Fragments and <></>

13) JSX syntax and Rules ?


14) Props In React ??

15) State Variable ??

16) useState ??

17) onChange in Input tag 

18) React Architechture -> virtual dom

19) Rendering and Rerendering :
In React, "rendering" refers to the process by which React determines what to display on the screen based on the current state and props of your components. It's the core mechanism for updating the User Interface (UI).
The Rendering Process:
Initial Render: When your React application first loads, React starts at the root component and recursively calls the render logic (the function for functional components or the render() method for class components) of each component in the tree. This process generates a "virtual DOM" representation of the UI.
Re-renders (Updates): Subsequent renders are triggered primarily by changes in a component's state or props. When state or props change, React marks the affected component (and its children) as needing an update.



20) What is REGEX or Regular expressions ??



21) Bind and Arrow functions ??


function great() {

}

const great = () => {

}


22) Conditional Rendering in React


23) If, Ternery, props


24) Hide and Show

25) List and Keys in React 

26) Routing In React ?? 

27) Hooks in React ?? ( IMP )
Hooks let you use different React features from your components. You can either use the built-in Hooks or combine them to build your own. This page lists all built-in Hooks in React.

Built-In Hooks and Custom Hooks


- useState hook : The useState hook allows you to add state to a functional component. It takes an initial value as an argument and returns an array with two elements: the current state value and a function to update it. 

- useEffect hook : The useEffect hook allows you to perform side effects in a functional component. Side effects include things like fetching data from an API, updating the DOM, or subscribing to an event.

- useRef hook : useRef is a React Hook that lets you remember a value between re-renders — without causing your component to re-render.

- useContext hook : The useContext hook allows you to access a context object in a functional component. Context is a way to pass data down the component tree without having to pass props manually.

Here’s an example of how to use useContext to access a theme context:

- useReducer hook : useReducer is a React Hook that helps you manage complex state logic. It’s similar to useState,
but instead of updating the state directly, you use a reducer function that decides how the state should change.

- useCallback : The useCallback hook allows you to memoize a function so that it’s only re-created when its dependencies change. This can help improve performance by preventing unnecessary re-renders.


-useMemo hook : The useMemo hook allows you to memoize a value so that it’s only re-computed when its dependencies change. This can help improve performance by preventing unnecessary re-computations.

- useParams hooks : useParams is a hook provided by React Router that allows functional components to access dynamic parameters from the URL. It is a key tool for building dynamic content rendering based on the route's parameters.

-useNavigate


28 ) Link


29) Custom Hooks :  Custom Hooks in React are JavaScript functions designed to extract and reuse stateful logic from functional components. They allow developers to encapsulate common patterns and behaviors, making code more modular, readable, and maintainable.


30) Props Drilling : -  Prop drilling refers to the process of passing props down through multiple layers of components to reach a deeply nested component that requires access to that data.


31) Context API : The Context API in React is a built-in feature that enables sharing data across the entire component tree without the need for "prop drilling."

To start using the Context API, the first thing you need to do is to create a context using the createContext() method. This function returns a context object with two components – a Provider and a Consumer.

The Provider is used to wrap the part of your component tree where you want the context to be available. It accepts a compulsory value prop that holds the data you want to share across other components. When the value prop of the Provider changes, all descendants that consume the context will re-render.

The Consumer allows any descendant component to use the context. It takes a function as a child, where the function argument is the current context value. In modern React, the useContext hook is often used instead of Consumer for better readability and simplicity.


32) Recoil vs. Zustand vs. Redux Vs Context

33) Throttling and Debouncing

34) Lazy Loading and Suspense
Lazy loading in React is a technique used to defer the loading of components or resources until they are actually needed, rather than loading them all at once during the initial application load. This optimizes performance by reducing the initial bundle size and improving the perceived loading speed for users.

React.Suspense: This component lets you "wait" for other components to load dynamically. You wrap your React.lazy() component with Suspense and provide a fallback prop, which renders a placeholder UI (like a loading spinner) while the lazy component is being fetched and rendered.

35) React Redux 

36) Authentication (AuthN) = confirm who the user is (login).

Authorization (AuthZ) = what that user is allowed to do (roles/permissions).

Tokens: Short-lived access tokens (used to access APIs) + longer-lived refresh tokens (used to mint new access tokens).

Storage tradeoffs: localStorage/sessionStorage are vulnerable to XSS. HttpOnly cookies are safer for refresh tokens but require CSRF protection for stateful cookie flows. A good pattern for SPAs: keep access token in memory (not persisted) and store refresh token in an HttpOnly secure cookie.

OAuth / OIDC for third-party logins (Google/GitHub) — for SPAs use PKCE or rely on server-side flow.

MFA, email verification, password reset, rate-limiting and logging are essential production features